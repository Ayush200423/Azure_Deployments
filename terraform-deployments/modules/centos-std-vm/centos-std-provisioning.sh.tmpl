  
# Copyright (c) 2020 Teradici Corporation
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#!/bin/bash

INST_LOG_PATH="/var/log/teradici/agent/"
INST_LOG_FILE="/var/log/teradici/agent/install.log"
DETAILED_LOG_FILE="/var/log/teradici/agent/detailed.log"
PCOIP_AGENT_REPO_PUBKEY_URL="https://downloads.teradici.com/rhel/teradici.pub.gpg"
PCOIP_AGENT_REPO_URL="https://downloads.teradici.com/rhel/pcoip.repo"

PCOIP_REGISTRATION_CODE=${pcoip_registration_code}
AD_SERVICE_ACCOUNT_PASSWORD=${ad_service_account_password}
AD_SERVICE_ACCOUNT_USERNAME=${ad_service_account_username}
DOMAIN_NAME=${domain_name}
DOMAIN_CONTROLLER_IP=${domain_controller_ip}
APPLICATION_ID=${application_id}
AAD_CLIENT_SECRET=${aad_client_secret}
TENANT_ID=${tenant_id}

log() {
    local message="$1"
    echo "[$(date)] $${message}" | tee -a "$INST_LOG_FILE"
}

error_exit() {
	log "$1" 1>&2
	exit 1
}

get_credentials() {
    if [[ -z "$TENANT_ID" ]]; then
        log "Not getting secrets from Azure Key Vault. Exiting get_credentials..."
    else
        set +x
        log "Getting secrets from Azure Key Vault..."
        ACCESS_TOKEN=$(curl -X POST -d "grant_type=client_credentials&client_id=$APPLICATION_ID&client_secret=$AAD_CLIENT_SECRET&resource=https%3A%2F%2Fvault.azure.net" https://login.microsoftonline.com/$TENANT_ID/oauth2/token | jq ".access_token" -r)
        PCOIP_REGISTRATION_CODE=$(curl -X GET -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" --url "$PCOIP_REGISTRATION_CODE?api-version=2016-10-01" | jq -r '.value')
        AD_SERVICE_ACCOUNT_PASSWORD=$(curl -X GET -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" --url "$AD_SERVICE_ACCOUNT_PASSWORD?api-version=2016-10-01" | jq -r '.value')
        set -x
    fi
}

install_pcoip_agent() {
    if ! (rpm -q pcoip-agent-standard)
    then
        log "--> Installing PCoIP agent..."
        # Get the Teradici pubkey
        log "--> Getting Teradici pubkey..."
        rpm --import $PCOIP_AGENT_REPO_PUBKEY_URL

        # Get pcoip repo
        log "--> Get Teradici PCoIP agent repo"
        wget --retry-connrefused --tries=3 --waitretry=5 -O /etc/yum.repos.d/pcoip.repo $PCOIP_AGENT_REPO_URL

        log "--> Install PCoIP standard agent ..."
        dnf -y install pcoip-agent-standard
        if [ $? -ne 0 ]; then
            log "--> Failed to install PCoIP agent."
            exit 1
        fi
        log "--> PCoIP agent installed successfully."

        set +x
        if [[ "$PCOIP_REGISTRATION_CODE" ]]; then
            log "--> Registering PCoIP agent license..."
            n=0
            while true; do
                /usr/sbin/pcoip-register-host --registration-code="$PCOIP_REGISTRATION_CODE" && break
                log "--> $?"
                n=$[$n+1]

                if [ $n -ge 10 ]; then
                    log "--> Failed to register PCoIP agent after $n tries."
                    exit 1
                fi

                log "--> Failed to register PCoIP agent. Retrying in 10s..."
                sleep 10
            done
            log "--> PCoIP agent registered successfully."
        else
            log "--> No PCoIP Registration Code provided. Skipping PCoIP agent registration..."
        fi
        set -x
    fi
}

# Join domain
join_domain()
{
    local dns_record_file="dns_record"
    if [[ ! -f "$dns_record_file" ]]
    then
        log "--> DOMAIN NAME: $DOMAIN_NAME"
        log "--> USERNAME: $AD_SERVICE_ACCOUNT_USERNAME"
        log "--> DOMAIN CONTROLLER: $DOMAIN_CONTROLLER_IP"
        log "--> HOSTNAME: $HOSTNAME"

        VM_NAME=$(hostname)

        log "--> VM_NAME: $VM_NAME"

        # Wait for AD service account to be set up
        yum -y install openldap-clients
        if [ $? -ne 0 ]; then
            log "--> Failed to install openldap-clients"
            exit 1
        fi

        counter=0

        log "$_"
        log "--> Wait for AD account $AD_SERVICE_ACCOUNT_USERNAME@$DOMAIN_NAME to be available"
        until ldapwhoami -H ldap://$DOMAIN_CONTROLLER_IP -D $AD_SERVICE_ACCOUNT_USERNAME@$DOMAIN_NAME -w "$AD_SERVICE_ACCOUNT_PASSWORD" -o nettimeout=3 > /dev/null 2>&1
        do
            counter=$(($counter + 1))
            log "$AD_SERVICE_ACCOUNT_USERNAME@$DOMAIN_NAME not available yet, retrying in 10 seconds..."
            sleep 10
            if [ $counter -ge 360 ]; then
                log "--> Failed to join domain controller after $counter tries."
                break
            fi
        done

        # Join domain
        log "--> Install required packages to join domain"
        yum -y  install sssd realmd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python
        if [ $? -ne 0 ]; then
            log "--> Failed to install required packages to join domain"
            exit 1
        fi

        log "--> Restarting messagebus service"
        if ! (systemctl restart messagebus)
        then
            log "--> Failed to restart messagebus service"
            return 106
        fi

        log "--> Joining the domain '$DOMAIN_NAME'..."
        local retries=10

        set +x
        while true
        do
            echo $AD_SERVICE_ACCOUNT_PASSWORD | realm join --user="$AD_SERVICE_ACCOUNT_USERNAME@$DOMAIN_NAME" "$DOMAIN_NAME" --verbose >&2
            
            local rc=$?
            if [[ $rc -eq 0 ]]
            then
                log "--> Successfully joined domain '$DOMAIN_NAME'."
                break
            fi

            if [ $retries -eq 0 ]
            then
                log "--> ERROR: Failed to join domain '$DOMAIN_NAME'."
                return 106
            fi

            log "--> ERROR: Failed to join domain '$DOMAIN_NAME'. $retries retries remaining..."
            retries=$((retries-1))
            sleep 60
        done
        set -x

        log "--> Configuring settings"
        sed -i '$ a\dyndns_update = True\ndyndns_ttl = 3600\ndyndns_refresh_interval = 43200\ndyndns_update_ptr = True\nldap_user_principal = nosuchattribute' /etc/sssd/sssd.conf
        sed -c -i "s/\\(use_fully_qualified_names *= *\\).*/\\1False/" /etc/sssd/sssd.conf
        sed -c -i "s/\\(fallback_homedir *= *\\).*/\\1\\/home\\/%u/" /etc/sssd/sssd.conf
        domainname "$VM_NAME.$DOMAIN_NAME"
        echo "%$DOMAIN_NAME\\\\Domain\\ Admins ALL=(ALL) ALL" > /etc/sudoers.d/sudoers

        log "--> Registering with DNS"
        DOMAIN_UPPER=$(echo "$DOMAIN_NAME" | tr '[:lower:]' '[:upper:]')
        IP_ADDRESS=$(hostname -I | grep -Eo '10.([0-9]*\.){2}[0-9]*')

        set +x
        echo $AD_SERVICE_ACCOUNT_PASSWORD | kinit "$AD_SERVICE_ACCOUNT_USERNAME"@"$DOMAIN_UPPER"
        set -x
        touch "$dns_record_file"
        echo "server $DOMAIN_CONTROLLER_IP" > "$dns_record_file"
        echo "update add $VM_NAME.$DOMAIN_NAME 600 a $IP_ADDRESS" >> "$dns_record_file"
        echo "send" >> "$dns_record_file"
        nsupdate -g "$dns_record_file"
    fi
}

update_firewall() {
    log "--> Adding 'pcoip-agent' service to public firewall zone..."
    firewall-offline-cmd --zone=public --add-service=pcoip-agent
    systemctl enable firewalld
    systemctl start firewalld
}

exit_and_restart() {
    log "--> Rebooting..."
    (sleep 1; reboot -p) &
    exit
}

if (rpm -q pcoip-agent-standard); then
    exit
fi

# Create log file
if [[ ! -f "$INST_LOG_FILE" ]]
then
    mkdir -p "$INST_LOG_PATH"
    touch "$INST_LOG_FILE"
    chmod +644 "$INST_LOG_FILE"
fi

# Create log file
if [[ ! -f "$DETAILED_LOG_FILE" ]]
then
    mkdir -p "$ERR_LOG_PATH"
    touch "$DETAILED_LOG_FILE"
    chmod +644 "$DETAILED_LOG_FILE"
fi

# Redirect stdout and stderr to the log file
exec &>>$DETAILED_LOG_FILE

# install dnf to replace yum based installations
log "Installing dnf"
yum -y -q install dnf-automatic

log "Starting dnf"
systemctl enable dnf-automatic.timer
systemctl start dnf-automatic.timer

# A flag to check if a GUI is installed
IS_GUI_INSTALLED=0

log "--> Get epel-release"
yum -y install epel-release
if [ $? -ne 0 ]; then
    log "--> Failed to install epel-release"
    exit 1
fi

log "--> Installing jq"
yum install -y jq
if [ $? -ne 0 ]; then
    log "Failed to install jq"
fi

get_credentials

log "--> Installing Linux GUI ..."
yum -y groupinstall "GNOME Desktop" "Graphical Administration Tools"
if [ $? -ne 0 ]; then
    log "Failed to install Linux GUI"
    IS_GUI_INSTALLED=1
fi

log "--> Set default to graphical target"
systemctl set-default graphical.target

join_domain

install_pcoip_agent

if [[ $IS_GUI_INSTALLED -eq 1 ]] 
then
    log "--> Retrying installation of Linux GUI ..."
    yum -y groupinstall "GNOME Desktop" "Graphical Administration Tools"

    if [ $? -ne 0 ]; then
        log "Failed to install Linux GUI on the second attempt."
        exit 1
    fi
fi

# Stage complete
log "--> Installaion complete!"

exit_and_restart