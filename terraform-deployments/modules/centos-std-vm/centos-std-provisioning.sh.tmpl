  
# Copyright (c) 2020 Teradici Corporation
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#!/bin/bash

INST_LOG_PATH="/var/log/teradici/agent/"
INST_LOG_FILE="/var/log/teradici/agent/install.log"

pcoip_registration_code=${pcoip_registration_code}
ad_service_account_password=${ad_service_account_password}
ad_service_account_username=${ad_service_account_username}
domain_name=${domain_name}
domain_controller_ip=${domain_controller_ip}
appID=${app_id}
aadClientSecret=${aad_client_secret}
tenantID=${tenant_id}
pcoip_reg_secret_key=${pcoip_reg_secret_key}
ad_pass_secret_key=${ad_pass_secret_id}

log() {
    local message="$1"
    echo "[$(date)] $${message}" | tee -a "$INST_LOG_FILE"
}

error_exit() {
	log "$1" 1>&2
	exit 1
}

get_access_token() {
    accessToken=`curl -X POST -d "grant_type=client_credentials&client_id=$1&client_secret=$2&resource=https%3A%2F%2Fvault.azure.net" https://login.microsoftonline.com/$3/oauth2/token`
    token=$(echo $accessToken | jq ".access_token" -r)
    log "$token"
    output=`curl -X GET -H "Authorization: Bearer $token" -H "Content-Type: application/json" --url "$4?api-version=2016-10-01"`
    log "$output"
    output=$(echo $output | jq '.value')
    chrlen=$${#output}
    output=$${output:1:$chrlen-2}
}

get_credentials() {
    # Check if we need to get secret from Azure Key Vault
    if [[ -z "$1" || -z "$2" || -z "$3" || -z "$4" || -z "$5" ]]; then
       log "Not getting secrets from Azure Key Vault: $2, $1, $3, $4, $5"
    else
       log "Using following passed data to decrypt: $2, $1, $3, $4, $5"
       get_access_token $2 $1 $3 $4
       pcoip_registration_code=$output
       log "REG: $pcoip_registration_code"
       get_access_token $2 $1 $3 $5
       ad_service_account_password=$output
       log "AD PASS: $ad_service_account_password"
    fi
}

install_pcoip_agent() {
    if ! (rpm -q pcoip-agent-standard)
    then
        log "--> Start to install pcoip agent ..."
        # Get the Teradici pubkey
        log "--> Get Teradici pubkey"
        rpm --import https://downloads.teradici.com/rhel/teradici.pub.gpg

        # Get pcoip repo
        log "--> Get Teradici PCoIP agent repo"
        wget --retry-connrefused --tries=3 --waitretry=5 -O /etc/yum.repos.d/pcoip.repo https://downloads.teradici.com/rhel/pcoip.repo

        log "--> Install PCoIP standard agent ..."
        dnf -y install pcoip-agent-standard
        if [ $? -ne 0 ]; then
            log "--> Failed to install PCoIP agent."
            exit 1
        fi
        log "--> PCoIP agent installed successfully."

        log "--> Register pcoip agent license ..."
        n=0
        while true; do
            /usr/sbin/pcoip-register-host --registration-code="$pcoip_registration_code" && break
            log "--> $?"
            n=$[$n+1]

            if [ $n -ge 10 ]; then
                log "--> Failed to register PCoIP agent after $n tries."
                log "--> $pcoip_registration_code"
                exit 1
            fi

            log "--> Failed to register PCoIP agent. Retrying in 10s..."
            sleep 10
        done
        log "--> Pcoip agent is registered successfully"
    fi
}

# Join domain
join_domain()
{
    local dns_record_file="dns_record"
    if [[ ! -f "$dns_record_file" ]]
    then
        log "--> DOMAIN NAME: ${domain_name}"
        log "--> USERNAME: ${ad_service_account_username}"
        log "--> PASSWORD: ${ad_service_account_password}"
        log "--> DOMAIN CONTROLLER: ${domain_controller_ip}"
        log "--> HOSTNAME: $HOSTNAME"

        VM_NAME=$(hostname)

        log "--> VM_NAME: $VM_NAME"

        # Wait for AD service account to be set up
        yum -y install openldap-clients
        if [ $? -ne 0 ]; then
            log "--> Failed to install openldap-clients"
            exit 1
        fi

        counter=0

        log "$_"
        log "--> Wait for AD account ${ad_service_account_username}@${domain_name} to be available"
        until ldapwhoami -H ldap://${domain_controller_ip} -D ${ad_service_account_username}@${domain_name} -w "${ad_service_account_password}" -o nettimeout=3 > /dev/null 2>&1
        do
            counter=$(($counter + 1))
            log "${ad_service_account_username}@${domain_name} not available yet, retrying in 10 seconds..."
            sleep 10
            if [ $counter -ge 360 ]; then
                log "--> Failed to join domain controller after $counter tries."
                break
            fi
        done

        # Join domain
        log "--> Install required packages to join domain"
        yum -y  install sssd realmd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python
        if [ $? -ne 0 ]; then
            log "--> Failed to install required packages to join domain"
            exit 1
        fi

        log "--> Restarting messagebus service"
        if ! (systemctl restart messagebus)
        then
            log "--> Failed to restart messagebus service"
            return 106
        fi

        log "--> Joining the domain '${domain_name}'..."
        local retries=10

        set +x
        while true
        do
            echo "${ad_service_account_password}" | realm join --user="${ad_service_account_username}@${domain_name}" "${domain_name}" --verbose >&2
            
            local rc=$?
            if [[ $rc -eq 0 ]]
            then
                log "--> Successfully joined domain '${domain_name}'."
                break
            fi

            if [ $retries -eq 0 ]
            then
                log "--> ERROR: Failed to join domain '${domain_name}'."
                return 106
            fi

            log "--> ERROR: Failed to join domain '${domain_name}'. $retries retries remaining..."
            retries=$((retries-1))
            sleep 60
        done
        set -x

        log "--> Configuring settings"
        sed -i '$ a\dyndns_update = True\ndyndns_ttl = 3600\ndyndns_refresh_interval = 43200\ndyndns_update_ptr = True\nldap_user_principal = nosuchattribute' /etc/sssd/sssd.conf
        sed -c -i "s/\\(use_fully_qualified_names *= *\\).*/\\1False/" /etc/sssd/sssd.conf
        sed -c -i "s/\\(fallback_homedir *= *\\).*/\\1\\/home\\/%u/" /etc/sssd/sssd.conf
        domainname "$VM_NAME.${domain_name}"
        echo "%${domain_name}\\\\Domain\\ Admins ALL=(ALL) ALL" > /etc/sudoers.d/sudoers

        log "--> Registering with DNS"
        DOMAIN_UPPER=$(echo "${domain_name}" | tr '[:lower:]' '[:upper:]')
        IP_ADDRESS=$(hostname -I | grep -Eo '10.([0-9]*\.){2}[0-9]*')
        echo "${ad_service_account_password}" | kinit "${ad_service_account_username}"@"$DOMAIN_UPPER"
        touch "$dns_record_file"
        echo "server ${domain_controller_ip}" > "$dns_record_file"
        echo "update add $VM_NAME.${domain_name} 600 a $IP_ADDRESS" >> "$dns_record_file"
        echo "send" >> "$dns_record_file"
        nsupdate -g "$dns_record_file"
    fi
}

update_firewall() {
    log "--> Adding 'pcoip-agent' service to public firewall zone..."
    firewall-offline-cmd --zone=public --add-service=pcoip-agent
    systemctl enable firewalld
    systemctl start firewalld
}

exit_and_restart() {
    log "--> Rebooting..."
    (sleep 1; reboot -p) &
    exit
}

if (rpm -q pcoip-agent-standard); then
    exit
fi

# Create log file
if [[ ! -f "$INST_LOG_FILE" ]]
then
    mkdir -p "$INST_LOG_PATH"
    touch "$INST_LOG_FILE"
    chmod +644 "$INST_LOG_FILE"
fi

# install dnf to replace yum based installations
log "Installing dnf"
yum -y -q install dnf-automatic

log "Starting dnf"
systemctl enable dnf-automatic.timer
systemctl start dnf-automatic.timer

log "Installing dos2unix"
yum install -y dos2unix

log "$(date)"

log "Passed Variables: $2, $1, $3, $4, $5"
get_credentials $aadClientSecret $appID $tenantID $pcoip_reg_secret_key $ad_pass_secret_key

log "$domain_name ;; $domain_controller_ip"

log "--> Get epel-release"
yum -y install epel-release
if [ $? -ne 0 ]; then
    log "--> Failed to install epel-release"
    exit 1
fi

# log "Updating packages.."
# dnf -y update

log "--> Install Linux GUI ..."
yum -y groupinstall "GNOME Desktop" "Graphical Administration Tools"
if [ $? -ne 0 ]; then
    log "Failed to install Linux GUI"
fi

log "--> Set default to graphical target"
systemctl set-default graphical.target

if [[ -z domain_name && -z domain_controller_ip ]]; then
    log "--> Not joining domain controller"
else
    log "--> Joining domain controller"
    join_domain
fi

install_pcoip_agent

# Stage complete
log "centos-provisioning.sh complete"
log " - - - - - - - - - - - - - - - - - "

exit_and_restart