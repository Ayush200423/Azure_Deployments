# Copyright (c) 2020 Teradici Corporation
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#!/bin/bash

# exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

PCOIP_AGENT_REPO_PUBKEY_URL="https://downloads.teradici.com/rhel/teradici.pub.gpg"
PCOIP_AGENT_REPO_URL="https://downloads.teradici.com/rhel/pcoip.repo"

pcoip_registration_code=${pcoip_registration_code}
ad_service_account_password=${ad_service_account_password}
ad_service_account_username=${ad_service_account_username}
domain_name=${domain_name}
domain_controller_ip=${domain_controller_ip}
appID=${app_id}
aadClientSecret=${aad_client_secret}
tenantID=${tenant_id}
pcoip_reg_secret_key=${pcoip_reg_secret_key}
ad_pass_secret_key=${ad_pass_secret_id}

INST_LOG_PATH="/var/log/teradici/agent/"
INST_LOG_FILE="/var/log/teradici/agent/install.log"
INST_ERR_LOG_FILE="/var/log/teradici/agent/error.log"

log() {
    local message="$1"
    echo "[$(date)] $${message}" | tee -a "$INST_LOG_FILE"
}

get_access_token() {
    accessToken=`curl -X POST -d "grant_type=client_credentials&client_id=$1&client_secret=$2&resource=https%3A%2F%2Fvault.azure.net" https://login.microsoftonline.com/$3/oauth2/token`
    token=$(echo $accessToken | jq ".access_token" -r)
    log "$token"
    output=`curl -X GET -H "Authorization: Bearer $token" -H "Content-Type: application/json" --url "$4?api-version=2016-10-01"`
    log "$output"
    output=$(echo $output | jq '.value')
    chrlen=$${#output}
    output=$${output:1:$chrlen-2}
}

get_credentials() {
    # Check if we need to get secret from Azure Key Vault
    if [[ -z "$1" || -z "$2" || -z "$3" || -z "$4" || -z "$5" ]]; then
       log "Not getting secrets from Azure Key Vault: $2, $1, $3, $4, $5"
    else
       log "Using following passed data to decrypt: $2, $1, $3, $4, $5"
       get_access_token $2 $1 $3 $4
       pcoip_registration_code=$output
       log "REG: $pcoip_registration_code"
       get_access_token $2 $1 $3 $5
       ad_service_account_password=$output
       log "AD PASS: $ad_service_account_password"
    fi
}

remove_nouveau() {
        log "--> Disabling the Nouveau kernel driver..."
        for driver in vga16fb nouveau nvidiafb rivafb rivatv; do
            echo "blacklist $driver" >> /etc/modprobe.d/blacklist.conf
        done

        log "--> Here 0"
        sed -i 's/\(^GRUB_CMDLINE_LINUX=".*\)"/\1 rdblacklist=nouveau"/' /etc/default/grub
        grub2-mkconfig -o /boot/grub2/grub.cfg
        log "--> Here 1"
}


install_kernel_header() {
    log "--> Installing kernel headers and development packages..."
    yum install kernel-devel kernel-headers -y
    exitCode=$?
    if [[ $exitCode -ne 0 ]]; then
        log "--> ERROR: Failed to install kernel header."
        exit 1
    fi

    yum install gcc -y
    exitCode=$?
    if [[ $exitCode -ne 0 ]]; then
        log "--> ERROR: Failed to install gcc."
        exit 1
    fi
}

# Download installation script and run to install NVIDIA driver
install_gpu_driver() {
    # the first part to check if GPU is attached
    # NVIDIA VID = 10DE
    # Display class code = 0300
    # the second part to check if the NVIDIA driver is installed
    if [[ $(lspci -d '10de:*:0300' -s '.0' | wc -l) -gt 0 ]] && ! (modprobe --resolve-alias nvidia > /dev/null 2>&1)
    then
        log "--> Installing GPU driver..."

        local nvidia_driver_filename=$(basename $${nvidia_driver_url})
        local gpu_installer="/tmp/$nvidia_driver_filename"

        log "--> Killing X server before installing driver..."
        service gdm stop

        log "--> Downloading GPU driver $nvidia_driver_filename to $gpu_installer..."
        wget --retry-connrefused --tries=3 --waitretry=5 -O "$gpu_installer" $${nvidia_driver_url}
        chmod u+x "$gpu_installer"

        log "--> Running GPU driver installer..."
        # -s, --silent Run silently; no questions are asked and no output is printed,
        # This option implies '--ui=none --no-questions'.
        # -X, --run-nvidia-xconfig
        # -Z, --disable-nouveau
        # --sanity Perform basic sanity tests on an existing NVIDIA driver installation.
        # --uninstall Uninstall the currently installed NVIDIA driver.
        # using dkms cause kernel rebuild and installation failure
        if "$gpu_installer" -s -Z -X
        then
            log "--> GPU driver installed successfully."
        else
            log "--> ERROR: Failed to install GPU driver."
            exit 1
        fi
    fi
}

# Enable persistence mode
enable_persistence_mode() {
    # the first part to check if the NVIDIA driver is installed
    # the second part to check if persistence mode is enabled
    if (modprobe --resolve-alias nvidia > /dev/null 2>&1) && [[ $(nvidia-smi -q | awk '/Persistence Mode/{print $NF}') != "Enabled" ]]
    then
        log "--> Enabling persistence mode..."

        # tar -xvjf /usr/share/doc/NVIDIA_GLX-1.0/sample/nvidia-persistenced-init.tar.bz2 -C /tmp
        # chmod +x /tmp/nvidia-persistenced-init/install.sh
        # /tmp/nvidia-persistenced-init/install.sh
        # local exitCode=$?
        # rm -rf /tmp/nvidia-persistenced-init
        # if [[ $exitCode -ne 0 ]]

        # Enable persistence mode
        # based on document https://docs.nvidia.com/deploy/driver-persistence/index.html,
        # Persistence Daemon shall be used in future
        if (nvidia-smi -pm ENABLED)
        then
            log "--> Persistence mode is enabled successfully"
        else
            log "--> ERROR: Failed to enable persistence mode."
            exit 1
        fi
    fi
}

# Enable persistence mode
enable_persistence_mode() {
    # the first part to check if the NVIDIA driver is installed
    # the second part to check if persistence mode is enabled
    if (modprobe --resolve-alias nvidia > /dev/null 2>&1) && [[ $(nvidia-smi -q | awk '/Persistence Mode/{print $NF}') != "Enabled" ]]
    then
        log "--> Enabling persistence mode..."

        # tar -xvjf /usr/share/doc/NVIDIA_GLX-1.0/sample/nvidia-persistenced-init.tar.bz2 -C /tmp
        # chmod +x /tmp/nvidia-persistenced-init/install.sh
        # /tmp/nvidia-persistenced-init/install.sh
        # local exitCode=$?
        # rm -rf /tmp/nvidia-persistenced-init
        # if [[ $exitCode -ne 0 ]]

        # Enable persistence mode
        # based on document https://docs.nvidia.com/deploy/driver-persistence/index.html,
        # Persistence Daemon shall be used in future
        if (nvidia-smi -pm ENABLED)
        then
            log "--> Persistence mode is enabled successfully"
        else
            log "--> ERROR: Failed to enable persistence mode."
            exit 1
        fi
    fi
}

install_pcoip_agent() {
    if ! (rpm -q pcoip-agent-graphics)
    then
        log "--> Installing PCoIP agent..."
        # Get the Teradici pubkey
        log "--> Getting Teradici pubkey..."
        rpm --import $PCOIP_AGENT_REPO_PUBKEY_URL

        # Get PCoIP repo
        log "--> Getting Teradici PCoIP agent repo..."
        wget --retry-connrefused --tries=3 --waitretry=5 -P /etc/yum.repos.d $PCOIP_AGENT_REPO_URL

        log "--> Installing PCoIP graphics agent..."
        yum -y install pcoip-agent-graphics
        if [ $? -ne 0 ]; then
            log "--> ERROR: Failed to install PCoIP agent."
            exit 1
        fi
        log "--> PCoIP agent installed successfully."

        set +x
        if [[ "${pcoip_registration_code}" ]]; then
            log "--> Registering PCoIP agent license..."
            n=0
            while true; do
                /usr/sbin/pcoip-register-host --registration-code="$pcoip_registration_code" && break
                n=$[$n+1]

                if [ $n -ge 10 ]; then
                    log "--> ERROR: Failed to register PCoIP agent after $n tries."
                    exit 1
                fi

                log "--> ERROR: Failed to register PCoIP agent. Retrying in 10s..."
                sleep 10
            done
            log "--> PCoIP agent registered successfully."

        else
            log "--> No PCoIP Registration Code provided. Skipping PCoIP agent registration..."
        fi
        set -x
    fi
}

# Join domain
join_domain()
{
    local dns_record_file="dns_record"
    if [[ ! -f "$dns_record_file" ]]
    then
        log "--> DOMAIN NAME: ${domain_name}"
        log "--> USERNAME: ${ad_service_account_username}"
        log "--> PASSWORD: ${ad_service_account_password}"
        log "--> DOMAIN CONTROLLER: ${domain_controller_ip}"
        log "--> HOSTNAME: $HOSTNAME"

        VM_NAME=$(hostname)

        log "--> VM_NAME: $VM_NAME"

        # Wait for AD service account to be set up
        yum -y install openldap-clients
        if [ $? -ne 0 ]; then
            log "--> Failed to install openldap-clients"
            exit 1
        fi

        counter=0

        log "$_"
        log "--> Wait for AD account ${ad_service_account_username}@${domain_name} to be available"
        until ldapwhoami -H ldap://${domain_controller_ip} -D ${ad_service_account_username}@${domain_name} -w "${ad_service_account_password}" -o nettimeout=3 > /dev/null 2>&1
        do
            counter=$(($counter + 1))
            log "${ad_service_account_username}@${domain_name} not available yet, retrying in 10 seconds..."
            sleep 10
            if [ $counter -ge 360 ]; then
                log "--> Failed to join domain controller after $counter tries."
                break
            fi
        done

        # Join domain
        log "--> Install required packages to join domain"
        yum -y  install sssd realmd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python
        if [ $? -ne 0 ]; then
            log "--> Failed to install required packages to join domain"
            exit 1
        fi

        log "--> Restarting messagebus service"
        if ! (systemctl restart messagebus)
        then
            log "--> Failed to restart messagebus service"
            return 106
        fi

        log "--> Joining the domain '${domain_name}'"
        if [[ -n "$OU" ]]
        then
            echo "${ad_service_account_password}" | realm join --user="${ad_service_account_username}@${domain_name}" "${domain_name}" --verbose >&2
        else
            echo "${ad_service_account_password}" | realm join --user="${ad_service_account_username}" "${domain_name}" >&2
        fi
        exitCode=$?
        if [[ $exitCode -eq 0 ]]
        then
            log "--> Joined Domain '${domain_name}'"
        else
            log "--> Failed to join Domain '${domain_name}' and OU '$OU'"
            return 106
        fi

        log "--> Configuring settings"
        sed -i '$ a\dyndns_update = True\ndyndns_ttl = 3600\ndyndns_refresh_interval = 43200\ndyndns_update_ptr = True\nldap_user_principal = nosuchattribute' /etc/sssd/sssd.conf
        sed -c -i "s/\\(use_fully_qualified_names *= *\\).*/\\1False/" /etc/sssd/sssd.conf
        sed -c -i "s/\\(fallback_homedir *= *\\).*/\\1\\/home\\/%u/" /etc/sssd/sssd.conf
        domainname "$VM_NAME.${domain_name}"
        echo "%${domain_name}\\\\Domain\\ Admins ALL=(ALL) ALL" > /etc/sudoers.d/sudoers

        log "--> Registering with DNS"
        DOMAIN_UPPER=$(echo "${domain_name}" | tr '[:lower:]' '[:upper:]')
        IP_ADDRESS=$(hostname -I | grep -Eo '10.([0-9]*\.){2}[0-9]*')
        echo "${ad_service_account_password}" | kinit "${ad_service_account_username}"@"$DOMAIN_UPPER"
        touch "$dns_record_file"
        echo "server ${domain_controller_ip}" > "$dns_record_file"
        echo "update add $VM_NAME.${domain_name} 600 a $IP_ADDRESS" >> "$dns_record_file"
        echo "send" >> "$dns_record_file"
        nsupdate -g "$dns_record_file"
    fi
}

exit_and_restart() {
    log "--> Rebooting..."
    (sleep 1; reboot -p) &
    exit
}

# Open up firewall for PCoIP Agent. By default eth0 is in firewall zone "public"
update_firewall() {
    log "--> Adding 'pcoip-agent' service to public firewall zone..."
    firewall-offline-cmd --zone=public --add-service=pcoip-agent
    systemctl enable firewalld
    systemctl start firewalld
}

# A flag to indicate if this is run from reboot
RE_ENTER=0

if (rpm -q pcoip-agent-graphics); then
    exit
fi

if [[ ! -f "$INST_LOG_FILE" ]]
then
    mkdir -p "$(dirname $INST_LOG_FILE)"
    touch "$INST_LOG_FILE"
    chmod +644 "$INST_LOG_FILE"
else
    RE_ENTER=1
fi

if [[ ! -f "$INST_ERR_LOG_FILE" ]]
then
    mkdir -p "$(dirname $INST_ERR_LOG_FILE)"
    touch "$INST_ERR_LOG_FILE"
    chmod +644 "$INST_ERR_LOG_FILE"
else
    RE_ENTER=1
fi


log "$(date)"

# Print all executed commands to the terminal
set -x

# Redirect stdout and stderr to the log file
exec &>>$INST_ERR_LOG_FILE

get_credentials $aadClientSecret $appID $tenantID $pcoip_reg_secret_key $ad_pass_secret_key

log $(pwd)

#if [[ $RE_ENTER -eq 0 ]]
#then
    # EPEL needed for GraphicsMagick-c++, required by PCoIP Agent

log "Installing epel-release.."
yum -y install epel-release

log "Installing jq"
yum install -y jq

log "--> Install Linux GUI ..."
yum -y groupinstall "GNOME Desktop" "Graphical Administration Tools"
if [ $? -ne 0 ]; then
    log "Failed to install Linux GUI"
fi

log "--> Setting default to graphical target..."
systemctl set-default graphical.target

join_domain

remove_nouveau

#   exit_and_restart
#else

install_kernel_header

install_gpu_driver

enable_persistence_mode

install_pcoip_agent

# update_firewall

log "--> Installation is complete!"

exit_and_restart
#fi

# log "Starting install of kernel header"
# install_kernel_header

# log "Starting install of NVidia driver"
# install_nvidia_driver

# # Stage complete
# log "centos-gfx-provisioning.sh complete"
# log "- - - - - - - - - - - - - - - - - - -"